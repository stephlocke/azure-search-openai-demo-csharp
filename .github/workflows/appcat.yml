name: assess modernisation effort
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
# This prevents first startup interactive expectations generating errors ðŸ‘‡
env:
  DOTNET_APPCAT_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  assess:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # The analysis version used doesn't matter afaik so you can always use the latest versions to support analysis
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Install appcat
      run: dotnet tool install -g dotnet-appcat
    - name: Run appcat JSON
      run: appcat analyze "./app" --source folder --report appcat-results/reports --serializer json --non-interactive --code --binaries --target AppService.Linux
    - name: Run appcat HTML
      run: appcat analyze "./app" --source folder --report appcat-results/reports/html --serializer html --non-interactive --code --binaries --target AppService.Linux
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        path: appcat-results/

# Saving of args here from running `appcat analyze --help`
# DESCRIPTION:
# Scan and analyze .NET applications source code to identify replatforming and migration opportunities for Azure.
# 
# USAGE:
#     appcat analyze [APPLICATION] [OPTIONS]
# 
# EXAMPLES:
#     appcat analyze
#     appcat analyze <APPLICATION_PATH>
#     appcat analyze <APPLICATION_PATH> --target AppService.Windows
#     appcat analyze <FOLDER_PATH> --source folder --target AppService.Windows
#     appcat analyze <IISSITE_NAME> --source IISServer --target AppService.Linux --config <CONFIG_PATH>
#     appcat analyze <APPLICATION_PATH> --report MyAppReport --serializer html --code --binaries
# 
# ARGUMENTS:
#     [APPLICATION]    Path to the application to be analyzed (could be repo folder, solution or project file path)
# 
# OPTIONS:
#     -h, --help                          Prints help information
#     -e, --extensions <EXTENSIONSDIR>    List of directories separated by ':' and containing exports.json file with
#                                         additional extensibility assemblies
#     -s, --source <SOURCE>               Source which the tool should analyze (Solution, Folder, IISServer)
#     -t, --target <TARGET>               Target toward which the tool should analyze the application
#     -c, --config <CONFIG>               Config file to customize analysis (select binaries, add or modify analysis
#                                         rules)
#     -r, --report <REPORT>               Path or name of the report to be generated after analysis is complete (could be
#                                         folder or file name depending on specified serializer)
#         --serializer <SERIALIZER>       Specifies the format for the report to be used after analysis is complete (HTML,
#                                         CSV, JSON, etc)
#         --non-interactive               When specified, it would only use arguments specified in command line and not
#                                         ask questions. If any required piece of data missing it would stop and print an
#                                         error message
#         --code                          Includes all your code, configs and settings in selected projects
#         --binaries                      Includes all external binary dependencies of selected projects


